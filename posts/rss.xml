<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>henglinli.github.io</title>
    <description>henglinli.github.io</description>
    <link>https://henglinli.github.io</link>
    <pubDate>2013-12-21</pubDate>
    <item>
      <title>object pool&#x7684;&#x5B9E;&#x73B0;</title>
      <link>https://henglinli.github.io/study/object-pool%E7%9A%84%E5%AE%9E%E7%8E%B0</link>
      <pubDate>2013-12-21</pubDate>
      <description>object pool implementation</description>
    </item>
    <item>
      <title>try translate queue(3) to cpp</title>
      <link>https://henglinli.github.io/try/try-translate-queue-3-to-cpp</link>
      <pubDate>2013-12-12</pubDate>
      <description>&lt;h3 id="toc_0"&gt;Motivation&lt;/h3&gt;

&lt;p&gt;[queue(3)][queue]&#x5F88;&#x65E9;&#x5C31;&#x63A5;&#x89E6;&#x8FC7;&#xFF0C;&#x548C;&#x4ED6;&#x7C7B;&#x4F3C;&#x7684;&#x8FD8;&#x6709;&lt;a href="http://www.cs.fsu.edu/%7Ebaker/devices/lxr/http/source/linux/include/linux/list.h" title="linux list"&gt;Linux list&lt;/a&gt;&#x4EE5;&#x53CA;&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Intrusive&lt;/a&gt;,
&#x4ED6;&#x4EEC;&#x7684;&#x5171;&#x901A;&#x70B9;&#x5C31;&#x662F;&lt;code&gt;&#x4ECB;&#x5165;&#x5F0F;(intrusive)&lt;/code&gt;, &#x4ECB;&#x5165;&#x5F0F;&#x548C;&#x975E;&#x4ECB;&#x5165;&#x5F0F;&#x5BB9;&#x5668;&#x7684;&#x533A;&#x522B;&#x533A;&#x522B;&#xFF0C;
&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Intrusive&lt;/a&gt;&#x7684;&#x6587;&#x6863;&#x8BB2;&#x7684;&#x5F88;&#x6E05;&#x695A;&#x3002;&#x6211;&#x603B;&#x7ED3;&#x4E0B;&#x4E3B;&#x8981;&#x7684;&#x4E24;&#x70B9;:&lt;/p&gt;

&lt;h4 id="toc_1"&gt;&#x529F;&#x80FD;&#x4E0A;&lt;/h4&gt;

&lt;p&gt;&#x4ECB;&#x5165;&#x5F0F;&#x5BB9;&#x5668;&#x4FDD;&#x5B58;&#x5BF9;&#x8C61;(&#x7528;&#x6237;&#x6570;&#x636E;)&#x672C;&#x8EAB;&#xFF1B;&#x975E;&#x4ECB;&#x5165;&#x5F0F;&#x5BB9;&#x5668;&#x4FDD;&#x5B58;&#x5BF9;&#x8C61;&#x62F7;&#x8D1D;&#x3002;&lt;/p&gt;

&lt;h4 id="toc_2"&gt;&#x5F62;&#x5F0F;&#x4E0A;&lt;/h4&gt;

&lt;p&gt;&#x4ECB;&#x5165;&#x662F;&#x5BB9;&#x5668;&#x4E0D;&#x9700;&#x8981;&#x8282;&#x70B9;&#xFF0C;&#x5BF9;&#x8C61;(&#x7528;&#x6237;&#x6570;&#x636E;)&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x8282;&#x70B9;&#xFF1B;&#x975E;&#x4ECB;&#x5165;&#x5F0F;&#x5BB9;&#x5668;&#x9700;&#x8981;&#x989D;&#x5916;&#x8282;&#x70B9;&#x3002;
&#x6B63;&#x662F;&#x5F62;&#x5F0F;&#x4E0A;&#x7684;&#x5DEE;&#x5F02;&#xFF0C;&#x5BFC;&#x81F4;&#x7684;&#x529F;&#x80FD;&#x7684;&#x5DEE;&#x5F02;&#x3002;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // &#x975E;&#x4ECB;&#x5165;&#x5F0F;&#xFF0C;&#x4E00;&#x4E2A; std::list&amp;lt;MyClass&amp;gt; &#x8282;&#x70B9;&#x7684;&#x53EF;&#x80FD;&#x5B9E;&#x73B0;
    class list_node {
        list_node *next;
        list_node *previous;
        MyClass value; // &#x5BF9;&#x8C61;(&#x7528;&#x6237;&#x6570;&#x636E;&#xFF09;
    };
    // &#x4ECB;&#x5165;&#x5F0F;&#xFF0C; &#x5BF9;&#x8C61;(&#x7528;&#x6237;&#x6570;&#xFF09;&#x636E;&#x672C;&#x8EAB;&#x5C31;&#x542B;&#x6709;&#x8282;&#x70B9;&#x4FE1;&#x606F;
    class MyClass {
       MyClass *next;
       MyClass *previous;
       // &#x5176;&#x5B83;&#x6210;&#x5458;...
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x5F88;&#x591A;&#x65B9;&#x9762;&#x4ECB;&#x5165;&#x5F0F;&#x5BB9;&#x5668;&#x90FD;&#x8981;&#x4F18;&#x4E8E;&#x975E;&#x4ECB;&#x5165;&#x5F0F;&#x5BB9;&#x5668;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x9009;&#x7528;&#xFF1A;
&#x94FE;&#x8868;&#x7C7B;&#x6211;&#x4F1A;&#x9009;[queue(3)][queue],&#x5B83;&#x8F83;&#x4E8E;&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Intrusive&lt;/a&gt;&#x4F18;&#x52BF;&#x662F;&lt;code&gt;Trivial(&#x5E73;&#x51E1;)&lt;/code&gt;&#x7684;;
&#x6811;&#x7C7B;&#x53EA;&#x80FD;&#x9009;&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Intrusive&lt;/a&gt;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_3"&gt;Why&lt;/h3&gt;

&lt;p&gt;&#x5E38;&#x89C4;&#x4F7F;&#x7528;&#x65F6;[queue(3)][queue]&#x8868;&#x73B0;&#x7684;&#x5F88;&#x597D;&#xFF0C;&#x53EF;&#x662F;&#x5728;&#x548C;&#x6A21;&#x7248;&#x6DF7;&#x7528;&#x65F6;&#x5C31;&#x6709;&#x95EE;&#x9898;&#x4E86;&#xFF1A;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // &#x539F;&#x7248;&#x672C;&#x7684;&#x5B9A;&#x4E49;`&#x542B;&#x5C3E;&#x8282;&#x70B9;&#x5355;&#x94FE;&#x8868;(Singly-linked tailq)`&#x5934;
    #define STAILQ_HEAD(name, type)                           \
    struct name {                                             \
        struct type *stqh_first; // first element             \
        struct type **stqh_last; // addr of last next element \
    }
    // &#x5982;&#x4E0B;&#x7F16;&#x8BD1;
    // clang++ -std=c++11
    // g++ -std=c++11
    template&amp;lt;typename Job&amp;gt;
    class Worker {
        STAILQ_HEAD(Head, Job) jobs_; // &#x8868;&#x5934;
    // clang&#x5982;&#x4E0B;&#x62A5;&#x9519;&#xFF1A;
    // declaration of &amp;#39;Job&amp;#39; shadows template parameter
    // &#x5B83;&#x8BA4;&#x4E3A;&#x6211;&#x53C8;&#x5B9A;&#x4E49;&#x4E86; Job
    // gcc&#x5982;&#x4E0B;&#x62A5;&#x9519;&#xFF1A;
    // using template type parameter &amp;#39;Job&amp;#39; after &amp;#39;struct&amp;#39;
    // &#x5B83;&#x8BF4;&#x5F97;&#x66F4;&#x57FA;&#x672C;struct&#x540E;&#x9762;&#x4E0D;&#x80FD;&#x8DDF;&#x6A21;&#x7248;&#x53C2;&#x6570;
    };
    // &#x65E0;&#x6548;&#x7684;&#x6539;&#x8FDB;&#x7248;&#x672C;, 
    // &#x597D;&#x5427;&#xFF0C;&#x544A;&#x8BC9;&#x4F60;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;
    #define CPP_STAILQ_HEAD(name, type)                \
    struct name {                                      \
        typename type *stqh_first; // first element             \
        typename type **stqh_last; // addr of last next element \
    }
    // &#x7ED3;&#x679C;&#x7F16;&#x8BD1;&#x5668;&#x4ECD;&#x7136;&#x62A5;&#x9519;
    // clang: C++ requires a type specifier for all declarations
    // &#x8FD8;&#x662F;&#x8BA4;&#x4E0D;&#x5230;&#xFF0C;typename &#x53EA;&#x80FD;&#x5728;&#x6709;&#x7533;&#x660E;&#x6CA1;&#x5B9E;&#x73B0;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x80FD;&#x7528;, 
    // &#x5728;&#x5B8F;&#x5C55;&#x5F00;&#x524D;&#xFF0C;type &#x4EC0;&#x4E48;&#x4E5F;&#x4E0D;&#x662F;&#x3002;
    // gcc: expected nested-name-specifier before &amp;#39;Job&amp;#39;
    // &#x9700;&#x8981;nested-name-specifier&#x5728;Job&#x524D;, &#x6211;&#x77E5;&#x9053;&#x4E86;&#xFF0C;
    // &#x81F3;&#x4E8E;nested-name-specifier&#x600E;&#x4E48;&#x5B9A;&#x4E49;&#x7684;&#xFF0C;&#x6211;&#x8FD8;&#x5F97;&#x67E5;C++&#x624B;&#x518C;&#xFF0C;&#x662F;&#x5427;&#xFF1F;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5176;&#x5B9E;&#x76F4;&#x63A5;&#x5B9A;&#x4E49;&#x8868;&#x5934;&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x8FD9;&#x662F;&#x56DE;&#x907F;&#x95EE;&#x9898;&#xFF1A;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    struct Head {
        Job *stqh_first;
        Job **stqh_last;
    } jobs_;
    // &#x6216;&#x8005;
    template&amp;lt;typename Type&amp;gt; struct Head {
        Type *stqh_first;
        Type **stqh_last;
    };
    Head&amp;lt;Job&amp;gt; jobs_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6211;&#x60F3;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x4EE5;&#x53CA;&#x66F4;&#x6DF1;&#x5165;&#x7684;&#x5B66;&#x4E60;&#xFF0C;&#x6240;&#x4EE5;&#x5C1D;&#x8BD5;&#x628A;[queue(3)][queue]&#x201C;&#x7FFB;&#x8BD1;&#x201D;&#x6210;c++&#x7248;&#x672C;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_4"&gt;Code&lt;/h3&gt;

&lt;p&gt;&#x89C1;&#x6211;&#x7684;Github&lt;a href="https://github.com/henglinli/TheServer/blob/master/TheServer/queue.hh" title="queue.hh"&gt;queue.hh&lt;/a&gt;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_5"&gt;Update&lt;/h3&gt;

&lt;p&gt;2013.12.13
&#x7531;&#x4E8E;&#x5C1D;&#x8BD5;&#x81EA;&#x5DF1;&#x4ECE;&#x5934;&#x5B9E;&#x73B0;&#x7C7B;&#x4F3C;&#x4E8E;&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Intrusive&lt;/a&gt;&#x7684;&#x5BB9;&#x5668;&#x592A;&#x8017;&#x65F6;&#xFF0C;
&#x6211;&#x5C1D;&#x8BD5;&#x4ECE;&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Inrusive&lt;/a&gt;&#x4E2D;&#x63D0;&#x53D6;&#x4EE3;&#x7801;&#xFF0C;&#x5374;&#x53D1;&#x73B0;&lt;a href="http://www.boost.org/doc/libs/release/libs/intrusive/" title="Boost.Intrusive"&gt;Boost.Inrusive&lt;/a&gt;
&#x7684;normal&lt;em&gt;link&#x6A21;&#x5F0F;&#x4E0B;&#xFF0C;&#x5B83;&#x7684;hook&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&lt;code&gt;&#x5E73;&#x51E1;&#x7684;(Trivial)&lt;/code&gt;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x6CA1;&#x6709;&#x5199;&#x6210;Trivial&#xFF0C;&#x4E3A;&#x4E86;&#x80FD;&#x8FBE;&#x5230;&#x8BE5;&#x76EE;&#x7684;&#xFF0C;
&#x5C06;&lt;code&gt;boost::intrusive::generic_hook&lt;/code&gt;&#x504F;&#x7279;&#x5316;normal&lt;/em&gt;link&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x4EE3;&#x7801;&#x89C1;[generic&lt;em&gt;hook.hh][generic&lt;/em&gt;hook_hh]&#x3002;&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    <item>
      <title>try Concurrency Kit and TBB</title>
      <link>https://henglinli.github.io/try/try-concurrency-kit-and-tbb</link>
      <pubDate>2013-12-05</pubDate>
      <description>&lt;h3 id="toc_0"&gt;Why&lt;/h3&gt;

&lt;p&gt;Server&#x7AEF;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x5BB9;&#x5668;&#xFF0C;&#x6765;&#x5B58;&#x653E;&#x5168;&#x90E8;Client&#x7684;&#x5F53;&#x524D;&#x72B6;&#x6001;&#xFF0C;&#x4EE5;&#x4FBF;&#x80FD;&#x505A;&#x5230;C2C&#x4EA4;&#x4E92;&#xFF1B;
&#x4E5F;&#x9700;&#x8981;&#x591A;&#x4E2A;&#x5168;&#x5C40;&#x5BB9;&#x5668;&#x6765;&#x4FDD;&#x6301;Server&#x7684;&#x72B6;&#x6001;&#x4FE1;&#x606F;&#xFF0C;&#x4EE5;&#x4FBF;&#x80FD;&#x505A;&#x5230;C2S&#x4EA4;&#x4E92;&#x3002;&#x591A;&#x7EBF;&#x7A0B;&#x4E0B;&#xFF0C;
&#x4F7F;&#x7528;&#x5E38;&#x89C4;&#x5BB9;&#x5668;(unorderd_map&#x7B49;)&#x5F97;&#x4E0A;&#x9501;&#xFF0C;&#x8FD9;&#x6837;Server&#x5C31;&#x6162;&#x4E0B;&#x6765;&#x4E86;&#x3002;&lt;/p&gt;

&lt;h2 id="toc_1"&gt;How&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://concurrencykit.org/" title="Concurrency Kit"&gt;Concurrency Kit&lt;/a&gt;&#x63D0;&#x4F9B;&#x591A;&#x79CD;&#x65E0;&#x9501;(lockfree)&#x5BB9;&#x5668;&#xFF0C;
&lt;a href="http://threadingbuildingblocks.org" title="Intel&#xAE; Threading Building Blocks (Intel&#xAE; TBB)"&gt;Intel&#xAE; Threading Building Blocks (Intel&#xAE; TBB)&lt;/a&gt;&#x4E5F;&#x63D0;&#x4F9B;&#x5E76;&#x53D1;&#x7684;&#x5BB9;&#x5668;&#xFF0C;
&lt;a href="http://threadingbuildingblocks.org" title="Intel&#xAE; Threading Building Blocks (Intel&#xAE; TBB)"&gt;Intel&#xAE; TBB&lt;/a&gt;&#x7684;&#x5E76;&#x53D1;&#x5BB9;&#x5668;&#x4E5F;&#x4E0D;&#x662F;&#x65E0;&#x9501;&#x5BB9;&#x5668;&#xFF0C;&#x7406;&#x8BBA;&#x4E0A;&#x8981;&#x6BD4;&lt;a href="http://concurrencykit.org/" title="Concurrency Kit"&gt;Concurrency Kit&lt;/a&gt;&#x6162;&#x3002;
&#x91C7;&#x7528;&#x4EE5;&#x4E0B;&#x4E09;&#x79CD;hash map:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // &#x5E26;&#x4E00;&#x4E2A;std::mutex&#x9501;&#x7684;std::unorderd_map
    class MutexHashMap {
        std::unorderd_map&amp;lt;int, void*&amp;gt; hash_map_;
        std::mutex mutex_;
    }; 
    // (Intel&#xAE; TBB)&#x7684;&#x5E76;&#x53D1;hash map
    using TBBHashMap = tbb::interface5::concurrent_hash_map&amp;lt;int, void*&amp;gt;;
    // Concurrency Kit&#x7684;&#x65E0;&#x9501;hash map
    struct ck_ht_t hash_table_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x786C;&#x4EF6;&#x91C7;&#x7528;Core2&#x53CC;&#x6838;2.4G CPU&#xFF0C;&#x7CFB;&#x7EDF;&#x91C7;&#x7528; OS X 10.9&#xFF0C;
key-value&#x5BF9;&#x91C7;&#x7528;&lt;code&gt;std::pair&amp;lt;int,void*&amp;gt;&lt;/code&gt;&#xFF0C;
&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x5E76;&#x53D1;&#x5199;4&#x4E07;&#x4E2A;key-value&#x5BF9;&#xFF0C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x67E5;&#x627E;4&#x4E07;&#x6B21;key&#xFF0C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5220;&#x9664;4&#x4E07;&#x4E2A;key-value&#x5BF9;&#xFF0C;
&#x4E09;&#x79CD;&#x5BB9;&#x5668;&#x5206;&#x522B;&#x8017;&#x65F6;&lt;code&gt;671 milliseconds&lt;/code&gt;&#x3001;&lt;code&gt;58 milliseconds&lt;/code&gt;&#x548C;&lt;code&gt;16 milliseconds&lt;/code&gt;&#x3002;
&#x663E;&#x7136;&lt;a href="http://concurrencykit.org/" title="Concurrency Kit"&gt;Concurrency Kit&lt;/a&gt;&#x8981;&#x5FEB;&#x5F88;&#x591A;&#xFF0C;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x5E26;&#x9501;&#x7684;&lt;code&gt;std::unorderd_map&lt;/code&gt;&#x6162;&#x592A;&#x591A;&#x4E86;&#x3002;&lt;/p&gt;

&lt;h2 id="toc_2"&gt;End&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/henglinli/TheServer/blob/master/TheServer/concurrent_hash_map.hh" title="concurrent hash map"&gt;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&lt;/a&gt;&#x89C1;&#x6211;&#x7684;&lt;a href="https://github.com/henglinli/TheServer" title="the server"&gt;Github/TheServer&lt;/a&gt;&#x3002;&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    <item>
      <title>Boost.Asio &#x8FDE;&#x63A5;&#x6C60;&#x7684;&#x8BBE;&#x8BA1;</title>
      <link>https://henglinli.github.io/study/boost-asio-%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1</link>
      <pubDate>2013-12-02</pubDate>
      <description>&#x5173;&#x4E8E;&#x8FDE;&#x63A5;&#x6C60;&#x7684;&#x8BBE;&#x8BA1;</description>
    </item>
    <item>
      <title>Botan SRP &#x4F7F;&#x7528;&#x4F8B;&#x5B50;</title>
      <link>https://henglinli.github.io/tutorial/botan-srp-%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90</link>
      <pubDate>2013-11-21</pubDate>
      <description>Botan SRP sample</description>
    </item>
  </channel>
</rss>
